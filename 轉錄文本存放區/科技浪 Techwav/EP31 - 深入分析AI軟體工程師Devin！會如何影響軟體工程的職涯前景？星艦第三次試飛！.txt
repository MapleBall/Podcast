(00:00~01:00) 哈囉大家好 歡迎收聽科技浪 我是主持人哈利 科技浪是一個白話跟你聊科技的Podcast 希望可以用簡單易懂 但是又深入的方式 帶你了解時下最火的科技話題 本集節目由ASUS贊助播出 那今天要跟大家推薦一台筆電 是這款新版的ROG Zephyrus G16筆電 那有在注意電競筆電的人呢 一定都知道ROG Zephyrus西風之神系列的筆電 那我自己一直以來都是這個西風之神筆電的愛用者 那我會很喜歡西風之神這系列的筆電呢 是因為我覺得他們真的是兼顧了好看又輕薄的外觀 以及高效 那通常呢就是我會想要一台就是很高效的筆電嘛 但是通常這種很高效的電競筆電呢 他們的外觀都不是非常的好看 然後又很笨重這樣
(01:00~02:00) 那西風之神系列筆電呢是真的非常的高效 但同時呢真的是外觀很輕薄又很潮喔 那今天要介紹的這台Zephyrus G16呢 我覺得就是這個西風之神系列筆電的巔峰之作 到目前為止的巔峰之作 首先他外觀真的是超好看 超級有質感 我當時我打開箱子我拿起來的那一刻 我就立刻感覺到 哇這台筆電有夠高級 因為他整台筆電是這個鈦金屬做的 然後他背後還有一個slash的動態燈效 就是一條斜線的燈這樣 那你打開筆電之後呢這個斜線燈就會亮 然後有很多種不同的亮法 我覺得看起來超酷超有科技感 然後他真的是非常的輕薄喔 他的厚度只有1.49公分 然後他的這個重量呢就1.85公斤 所以說你帶到星巴克去工作呢 你不但沒有很大的負擔 而且他好看的外觀呢 也不會讓你格格不入的感覺 那在效能的部分呢
(02:00~03:02) Zephyrus G16也真的是非常的高效 CPU的部分呢他們是搭載了這個 Intel最新版的Core Ultra Geo 185H的CPU 然後顯卡的部分呢你最高可以搭載到這個 NVIDIA GeForce RTX 4090的Laptop GPU 所以說基本上剪片玩遊戲是完全沒有問題的 那在AI運算這邊呢也是非常的強 我試跑了很多的模型 首先第一個就是大家都會測試的Stable Diffusion 那我可以跑得到最大的這個SDXO模型 然後生成一張圖片呢 只需要大概十幾秒左右十秒出頭這樣 然後我也有跑這個Whisper 也就是這個OpenAI的語音轉文字的模型 那我跑他們的Large V2 也就是他們最大的Whisper模型呢 一個小時的音檔差不多12分鐘就可以翻完了 那這邊當然啦 我也是有用一些這個軟體的加速 我並不是用這個最慢的Whisper跟SDXO的implementation這樣 那除了這兩個模型呢
(03:02~04:02) 你也是可以跑NVIDIA最近出的這個Chat with RTX的應用程式 那這個應用程式基本上就是一個LM加RAG的應用程式 它就是會在你的電腦上面裝一個大型圓模型 然後你可以在離線的情況之下呢 用這個應用程式 讓大型圓模型幫你解讀你的資料 不管你是PDF還是TXT還是Word檔什麼資料都可以 那這個Zephyrus G16呢 使用Chat with RTX的時候 然後選擇這個LAMA13B的模型呢 它還是可以跑得非常快非常順喔 那如果你在找的是一台輕薄好看 然後又非常高效的筆電的話 我真的很建議你參考Zephyrus G16這台筆電 你如果不信的話 你可以去他們門市預約賞機 你真的拿起來看一下 你就會知道我在說什麼 就是它真的非常的有質感 然後跑這些AI模型 跑這些遊戲跟剪片軟體也都跑得非常快 那同時也跟大家講一下這個優惠的資訊 他們現在華碩教育商店呢 有學生老師的獨家優惠
(04:02~05:02) 然後你們如果申請這個優惠的話 你還可以再送500塊的購物金喔 心動的朋友可以參考這個資訊欄的連結 去看一下這台筆電 然後去這個華碩教育商店呢 註冊一下 本集業配就到這邊結束 謝謝華碩的贊助 那這個禮拜呢也是非常有趣的一個禮拜 有很多科技新聞可以聊 我覺得最大的事件 就我看來 至少我有在追蹤的事件 就是第一個是美國政府要把TikTok給ban掉 再來呢就是SpaceX進行了他們的新建的第三次試飛 Starship的IFT3 然後呢再來就是 我也有拍影片講的就是 有一個叫做Devon的First AI Software Engineer的出現 由此以來第一個全自動的AI軟體工程師出來了 然後最後一個呢就是 一間叫做FigureAI的機器人公司呢 他們公佈了他們機器人的最新進度
(05:02~06:03) 然後這次呢他們是有跟OpenAI合作 一起做出這個機器人這樣 那這四件事呢說真的 我覺得每一件都可以單獨聊一集 因為他們都是水很深的事情 但我覺得我們今天呢就比較focus在後面這三件就好 然後可能也沒有辦法每一件事情都分析的很深入 但是我們就主要講這三件 那TikTok這件事情呢 我覺得我們今天就不講了 因為說真的這個TikTok的新聞呢 其實很大一部分是牽扯到美國政治 那我自己對於美國政治呢並不是非常了解 所以說這邊就不來誤導大家了 好但我覺得很快的還是講一下我自己對於這件事情的看法 就是說真的我是蠻百感交集的 就是一方面TikTok真的是很好的一個產品 它的演算法是我們前所未見的 真的在這之前真的很少有社群媒體可以在這麼短的時間之內 就抓住你這個人的喜好
(06:03~07:03) 然後可以長時間的讓你抓住你的注意力 然後給你你會想看的內容 那當然這件事情是好是壞 我覺得有很大的討論空間 但你不可否認的是 它作為一個社群媒體的產品 它非常的強 然後靠著它這個優秀的演算法 它帶起了一整波短影音的革命 這真是一個改變世界的革命喔 那一樣就是這個改變的方向是好還是壞 這個有很大討論空間 但它確實改變了世界 一般大眾使用社群媒體的方式徹底的改變了 整個創作者的生態系也大幅的改變了 大家都多了這種新的創作的形態 然後整個音樂產業啊廣告業啊 真的都是因為TikTok而完全的變得不一樣了 現在這個大家發行音樂 然後推廣自己音樂的方式 已經非常不一樣了 像這個台灣有個歌手叫做 派偉俊 對吧 Patrick 他好像是最近比較爆紅的一個歌手 那就就我所知啦
(07:03~08:04) 我對他沒有很熟 但就我所知 他就是最近是靠著這個短音音爆紅的 就是他那個 呃 半夜走在夜氣結的路 那首歌 他就是完全就是學那個Charlie Puth 他推廣音樂的方式 就是拍短音音介紹他自己製作音樂的整個過程這樣 那假設今天沒有短音音 我沒有要否認他的意思 但是我覺得他應該沒有辦法這麼快的爆紅這樣 那同時你也可能會說就是 他是在reels上面爆紅啊 那reels又不是TikTok 對啦沒錯 但是說真的 沒有TikTok帶起這波短音音的革命 reels也不會存在啦 IG就還是IG 就是還是圖片這樣 那在廣告業這邊呢 真的是品牌接觸使用者的方式 已經真的是大幅的改變了 短音音就是一級戰場了 那講了這麼多 我想講的其實就是 我覺得TikTok真的就是一個非常厲害的社群媒體的軟體這樣 那但同一時間呢
(08:04~09:05) 我又覺得就是TikTok的母公司自己的跳動 他跟中國政府的這個關係啊 真的是蠻讓人擔心的 那美國的美國人比較在講的這個 美國國民的資安 然後還有他們這個干擾選情 或是操縱輿論的這個情況 我個人自己覺得這個都是合理的擔憂 真的是確實蠻值得擔憂的 尤其在美國 TikTok是一個超過1.5億人在用的APP 那其實我覺得這個TikTok的這些國安威脅啊 對於台灣也是有一點 但我不知道為什麼 台灣人好像沒有在講這件事情 台灣人講到這個TikTok的事件 都是講美國的TikTok 都沒有講到我們台灣也有一些人在用TikTok這件事 那我個人覺得對於台灣人來說 這個輿論操控跟這個資安呢 也是有一定程度的威脅 但是沒有像美國這麼大啦 因為在台灣這個TikTok還不是最主流的一個APP 最主流的社群媒體
(09:05~10:06) 而且就我們這次大選的結果來看啊 就是中共如果有在操縱輿論的話 那應該是操縱蠻失敗的 我這邊沒有什麼政治立場 我就是開個玩笑而已 那我覺得這些擔憂呢 可能等到這些目前的TikTok使用者 他們長比較大了之後 會是比較多比較大的一個擔憂 但是目前我覺得還好 目前我自己比較怕的是一些不該用TikTok的人用TikTok 那這邊當然是我自己比較天馬行空的顧慮 我沒有聽到有人真的是調查過這件事情 但是我有想到一件事情就是 你在使用TikTok的時候 你要給他麥克風跟相機的權限 那假設今天 我說假設喔這完全是假設 就假設今天我們台灣有一個軍官 高層的軍官 他手機裡面有TikTok這個APP 那當然他進軍營的時候 他要開啟那個 我忘記那個叫什麼反正就是軍營裡面都有一個 封鎖你的相機的這個軟體嘛
(10:06~11:09) 那他要開啟那個軟體 但是那個相機不會那個軟體不會封鎖你的麥克風權限 封鎖了你就不能講電話了嘛 當然不可能封鎖 那假設今天這個TikTok母公司字節跳動 他們跟這個中國政府有非常密切的來往的話 中國政府可能真的有機會透過TikTok 輕而易舉的偷到台灣的軍史機密 那這件事呢我真的覺得技術上TikTok是絕對可以做到的 然後確實呢 就我記得我之前在軍營的時候 我也是有看到那裡面的軍人呢 雖然說他們都是比較小的 可能班長啊連長啊什麼的 但是也是可以看到他們手機裡面有這個TikTok的APP 然後有些人也是有抖音的APP 所以說這真的就是我的一個顧慮這樣 那我也要重申一次就是 我完全沒有任何的根據或者是任何的證據說這件事情正在發生 我不知道但是我覺得技術上是可行的 所以說TikTok這個APP真的是
(11:09~12:11) 一方面呢它真的是很棒很棒的一個APP 很厲害很厲害的演算法 但另外一方面呢它又是一個重大的這個國安的威脅 所以說我覺得真的是讓我蠻百感交集的 好那一不小心TikTok也是聊了有點太久了 我們趕快進入今天的正題 那正題這邊就剩下三件事情可以聊嘛 就是Devon還有這個SpaceX的火箭 他的Starship然後還有這個Figure AI的機器人 那我們先從Devon開始好了 那上禮拜呢有一間叫做Cognition的新創公司 他們做出了一個號稱是 由始以來第一個AI的軟體工程師 The first AI software engineer的產品 他們把它稱作Devon 那這個Devon呢顧名思義 他就是一個可以幫你寫程式的AI 他可以幫你從0到1寫出一個軟體 或者是幫你在現有的軟體裡面增加一個新的feature 或者是幫你debug你現在目前的程式這樣 反正基本上一個junior software engineer
(12:11~13:12) 他可以做到要做的事情他都可以做到這樣 那這個Cognition他們有拍一些Devon的demo影片 然後把這些影片放在X上面 那他們立刻就爆紅了 那Devon這個工具呢 他跟其他我們原本知道的這些AI寫扣工具 像是這個GitHub Copilot 他最不一樣的地方呢就是在於Devon他是一個agent 那一個agent通常有三項特別的能力是 一般的這種大型圓一般這種接話的大型圓模型是沒有的 這三項能力分別是計畫、執行跟工具使用的能力 那計畫的能力呢就是 他會把你給他的這個任務 先拆解成很多小的子任務 然後再把這個子任務轉化 再拆解成很多需要執行的具體步驟 然後把整個plan給列出來 先執行哪一個再執行哪一個 然後再來他也會實際的去執行這些步驟 然後根據這個步驟執行出來的結果 再去調整他的計畫
(13:12~14:16) 那工具使用呢就是指說這些agent他們有可以使用一些外部工具的能力 那這三項特質對於Devon來說呢就是 首先在工具這邊這個Devon呢有跟其他一般軟體工程師一樣可以使用的工具 就是最主要的三個 包括這個IDE也就是這個整合開發環境 你可以把它想像成就是他寫扣的地方 他扣的這個編輯器 那當然除了編輯code以外 IDE還有很多其他功能啊 那這些就先不要多講 那還有另外一個呢是這個中端機 或者是我們英文把它稱作terminal 或者是CMD這樣 那這個就是一個可以直接跟你的電腦系統做溝通 直接給對你的電腦系統下指令的一個介面 那最後呢這個Devon還有自己的瀏覽器可以使用 那這三個東西 這三個東西瀏覽器 中端機 然後還有IDE 基本上就是一個軟體工程師在開發的時候 需要用的三個最主要工具 那這三個工具呢Devon都有都會使用
(14:16~15:17) 那除了工具以外我另外講了兩個就是計畫能力跟這個執行的能力 那這邊我覺得我就直接帶大家走過一遍他們其中一個demo的過程 大家會比較容易了解 那其中一個demo是這樣 就是Cognition的工程師呢 他發現說他在一個數學的函式庫裡面發現說 你每次你要執行某一項特定的數學運算的時候呢 他給出來的答案都是錯的 那這個工程師呢就把這個函式庫 也就是這個GitHub上面的repository 然後貼給Devon然後跟Devon說 我每次在做這件事情的時候我都得到一個錯誤的答案 那他全部都是用英文說 都是很白話的把這件事情講完 就是給他一個例子這樣 就比如說我plugin什麼什麼數字 然後我得到什麼什麼數字 但不應該是這個數字這樣 就非常白話的跟Devon說 那Devon呢他就開始立刻做計畫 他就開始列出說 第一個步驟我要先把這整個函式庫的documentation都讀完
(15:17~16:18) 第二個步驟呢我要在我的電腦上面把這個函式庫下載下來 然後跑一次 然後第三個步驟呢我要重現這個使用者說的問題 然後第四步驟呢 他就把這整個計畫全部都列出來了 然後列出來之後呢他就一項一項開始執行 然後你就會看到這個Devon呢 在他的終端機把這個GitHub repo給clone下來了 就是把這個函式庫下載到他的電腦裡面的概念這樣 然後開始就是把這些code在ide裡面打開 然後實際的去執行這些code 然後根據使用者提的這個例子呢 去嘗試重現這個問題 然後重現出來了之後呢 他又開始做了debuging的計畫 就是他會先思考說 這個問題呢很可能是這個函式庫呢 他在做某一些數學操作的時候 他不該四捨五入的時候 四捨五入了 那這算是Devon很多假說中的其中一個假說啦 然後可能是最有可能的假說這樣 那Devon就根據這個假說呢 又列出了一些就是 實際要執行的步驟 去來驗證這個假說
(16:18~17:20) 那他做的事情呢就是 他到他的ide裡面 然後在這個函式庫的code裡面 加上很多行print statement 我們所謂的print statement就是 你可以把一個變數的值給印出來 給秀出來的這樣子的一個指令這樣 然後他就在這些數學運算的過程中 插入很多這些print statement 把這個運算過程的很多中間產物給印出來 看是哪一個步驟的時候 出現了這個不該出現的四捨五入 然後改完了code之後 他再執行一次code 然後再看那個code output 再來決定說 應該是哪裡要改哪裡出問題 然後再回去實際的把這個問題給解決 把這個不應該用整數的function換掉之類的 那在那之後呢 Devon又再跑一次整個函式庫 然後確保這個問題已經被消除了 然後同時也跑一些其他的測試 確保他這樣子修改code 不會影響到這個函式庫其他的運算 那到這邊呢 Devon基本上就是已經把這個問題給解決了
(17:20~18:20) 然後使用的就是他優秀的這個計畫 還有這個執行還有工具使用的能力 然後整個過程之中喔 工程師完全都不用動手 他就在旁邊看就好了 就看這個 甚至你不用看 你就去做其他事情 然後你等到Devon結束之後 你再過來看Devon的結果 看他結果就好 然後結果不滿意的話 你可以再去看他整個過程中做的所有事情 然後他們還有很多其他的demo 比如說另外還有一個就是 他們叫Devon使用一個叫做Qlora的方式 去Find Tune一個大型圓模型 他們就下了一個蠻有噱頭的一句話 就是說 讓你們看看 一個AI來訓練AI 在過程中呢 這個Devon也碰到了這個Cuda的版本問題 那我相信你如果有自己在玩AI 不管是訓練還是使用AI 自己在寫在碰這些code的話 你就會知道就是 Cuda版本問題是 蠻常出現的一件事情 然後是也是蠻
(18:20~19:22) 我覺得蠻棘手的一件事 但是這個Devon呢 也是自己把這個版本問題給解決掉了 自己去 不管是靠瀏覽器還是靠這個 他的repo裡面的這些documentation也好 就想辦法把這所有相容的版本都找出來 然後把不相容的給重裝一遍這樣 甚至呢 還有另外一個例子是 這個Cognition的工程師呢 他就丟給Devon一個部落格文章 甚至不是丟給他一些GitHub repo還是什麼 就是一個部落格文章的連結 然後跟他說 Devon你可以幫我把這個部落格文章裡面寫到的技術 給實際重現出來嗎 那想當然呢 Devon又是不靠人類任何一點幫助 就把這個部落格文章的技術給重現出來了 所以這個Devon啊 我覺得他爆紅有理 然後他號稱是世界第一個AI的軟體工程師 我覺得也不算是噱頭 他們真的就是一個AI的軟體工程師
(19:22~20:23) 但說真的他其實還並不是一個非常強的軟體工程師 當然他們demo的內容呢 他都是做得非常好 但他們這些是chipdick的結果嘛 他們失敗的東西不可能拿出來demo 我們可以看到他們也有說 有個benchmark專門在測AI的寫扣能力 叫做SWE Bench SWE就是Software Engineer的bench 那這個SWE Bench呢 它裡面包含的題目就是 實際你在GitHub上面會找到的這些GitHub issues 這些開源專案裡面的issues 那這個Devon呢 在完全沒有任何人類協助的狀況之下 他可以解決13.86%的issues 聽起來好像其實還是沒有很高 一個junior software engineer 可能可以解到40-50%之類的 或是你給他更多時間的話 他可能會解得更多之類的 我不確定他們好像沒有拿真人測試過這個SWE Bench 反正13.86%聽起來沒有很高嘛 但是呢在Devon之前啊
(20:23~21:23) 我們最強的AI的成績是4.8% 然後是Claw 2 4.8%跟13.86%真的是差了好幾個等級啊 但說真的這個benchmark的成績啊 我覺得看看就好了 因為我覺得是有點奇怪啊 到底為什麼在Devon之後的第二名竟然是Claw 2 然後他成績是4.8% 然後為什麼GPT-4他上面寫的成績是1.74% 為什麼GPT-4比Claw 2還爛 這完全不合理啊 我在想可能是 因為他這邊的成績有分assisted跟unassisted 就是有人類幫助跟沒人類幫助 那Claw 2是有人類幫助的才4.8% 這個我很確定 但是這個GPT-4呢 他的成績應該是沒有人類幫助的 那假設他有人類幫助 搞不好我保7%8% 可能就有點接近Devon了 那Devon這邊當然是激起了非常多的討論 尤其是很多軟體工程師呢 開始感到非常焦慮 或者是自工系的學生呢
(21:23~22:24) 都在講說要轉系 那除了這些比較焦慮的人口以外 還有另外一派是覺得 這個Devon根本就沒什麼 然後就覺得根本就沒有什麼屁用這樣 那這邊我們待會再來講 我們先來講講Cognition這間公司 那Cognition這間公司呢 其實只是一間成立不到兩個月 只有10個員工的超新超小型創 那雖然說他們只有10個員工 但這個10員工基本上組成了一個全明星陣容 他們10個員工加起來就有10張這個資訊奧林匹亞金牌 資訊奧林匹亞就是一個competitive coding的一個比賽 就是一個比寫程式的奧林匹亞 尤其是他們的CEO呢 這個今年27歲的Scott Wu 他更是這個competitive programming 也就是這個寫程式比賽界的傳奇 大家都是覺得他是神人一個 為什麼就是天生下來寫扣就是超強的那種人 甚至有人在開玩笑說這個Devin呢
(22:24~23:25) 背後就是Scott Wu在幫大家寫扣而已 因為他寫扣真的太快了 那同時呢Cognition雖然說才成立兩個月 但他們已經募到了21M美金的這個資金 主要是來自這個Peter Thiel的Founders Fund 然後還有一些其他的投資人 像是這個VC界很有名的這個Elliot Gill之類的 所以Cognition這間公司啊 現在真的是走路有風啊 太厲害了 他們才成立兩個月 然後只有十個員工 但他們十個員工全部都是一些寫扣怪物 然後他們產品才剛出來 立刻就在全世界爆紅 然後還獲得了 還募到了這個2100萬美金的資金 真的是非常厲害 那當然他們並沒有公佈任何關於這個Devin 他背後運作原理的細節 他產品背後的技術的細節 他們沒有講任何東西 不過只要你是追蹤這個AI領域 尤其是你有在看Agent領域夠久的人 你就會知道他就是一個GPT-4 wrapper的產品 大概就是這樣
(23:25~24:26) 就是在這個GPT-4 外面再包一層這個Agent的東西 然後給這個GPT-4一些可以call的API 就是這個Command Line Browser IDE的API 我有95%的信心 這個Devin就是這樣運作的 那為什麼這麼高的信心呢 首先他裡面有個大型魚人模型 這個非常確定嘛 然後這個大型魚人模型不可能是他們自己的模型 因為你才出來兩個月的一間公司 你不要跟我講你可以train什麼大型魚人模型出來 不可能 你一定是用GPT-4的API 那為什麼是GPT-4呢 因為GPT-4現在是血扣最強的模型 就我的理解來說是這樣 有人說現在換成了這個Claw3的OPUS 但OPUS上禮拜才出來 Devin在這之前就已經開發了 所以一定是GPT-4 然後他們選GPT-4還有另外一個原因就是 GPT-4有很好的function calling 我們說function calling就是說這些大型魚人模型 它會使用API 它會使用一些外部的API工具
(24:26~25:27) 那Devin會需要這個功能呢 想當然就是因為他們要使用一些外部工具 包括瀏覽器、IDE跟這個Command Line 這個終端機嘛 那我們再來很完整的講一下 這個Devin背後的這些不同的Component好了 首先第一個就是GPT-4的API 然後是有function calling的API 然後再來就是一個類似Lane Chain的一種Agent的工具 這個Agent的工具基本上就是讓這個GPT-4可以一直接自己的話 然後可以不斷的把這個任務給推進下去這樣 然後除此之外呢 還有這個Devin用得到的每一個工具 都有一個自己的API 這個Command Line、Browser ID都有自己的API 基本上就是這樣 也就是說這個Devin最厲害的這些部分 就是包括他做出來的這些計畫 然後他寫的這些code 這些部分全部都是由GPT-4負責的 就是GPT-4腦袋的內容這樣 他只是把這個GPT-4 給GPT-4一些工具
(25:27~26:28) 然後用這個Agent的框架呢 硬逼GPT-4一步一步思考 一步一步去拆解問題 大概就是這樣 也就是說呢 今天你問這個Devin一個問題 他實際在做的事情是這樣 就是他先使用GPT-4把你的問題吃進來 然後根據你的問題先去產生一個plan 一些步驟 那根據這個步驟呢 步驟一他要執行的時候呢 他就讓GPT-4產生一個可能 Jason的Data Structure Jason Data Structure就是拿來Code API的一種資料形態 比如說他第一個步驟是這個 要在CMD裡面Clone這個GitHub repo下來 就是一個Git的指令嘛 那他的這個Jason file裡面就有寫說這個指令是什麼 然後這個Jason file會實際拿去Code這個CMD的API 然後在這個CMD裡面加上這個指令 那這件事情就完成了 那他每一件事情都一樣
(26:28~27:30) 他要用Browser就是用Browser API 然後一樣就是這個GPT-4 在產生這些Jason的API Call 大概就是這樣 那你聽不懂也沒有關係 就是你不知道什麼是Jason也沒有關係 反正你只要記住我剛剛講的就好了 就是Devin呢 基本上就是一個會使用工具 然後會一步一步思考 一步一步拆解問題的GPT-4 就是這樣 那針對Devin就是一個比較精緻的OpenAI Rapper這件事情 網路上有一些人就是 就是拿這件事情在嘴Devin 就是他們會說 你就是一個OpenAI Rapper而已 運作原理這麼簡單 跟GPT-4幾乎沒有什麼差別 你的大腦就是GPT-4而已 那工程師有什麼好怕的 簡直是讓人笑掉大牙 那我在X上面看到很多這樣子的言論 我只能說我真的不懂他們的邏輯 就是一個產品他的原理單純好懂 不代表他不強啊 我個人是覺得沒錯Devin就是一個GPT-4的大腦 但是他比GPT-4強太多了
(27:30~28:30) 因為他把GPT-4的智能發揮到很高的程度 讓他進行一步一步的拆解問題 讓他使用外部工具 這些都是可以大幅提升GPT-4寫扣能力的一些features 你為什麼會覺得這個不強呢 那當然啦我覺得這些Haters還算是比較少數 我覺得絕大多數人都是被這個產品給驚艷到 然後尤其是工程師這些軟體工程師都說 我們要GG了就是要失業了這樣 那我們現在就來討論一下就是 軟體工程師真的會GG嗎 那接下來這邊當然都是我個人的想法啦 就跟大家分享一下你如果有別的意見 也可以在下面留言跟我講 但不要因為意見不合就給我一心好不好 我也很傷心 那首先我想先講的就是 軟體工程這個領域啊 他其實一直都在抽象化 意思就是說大家使用的這些工具 正在變得越來越簡單 越來越高層次 一直以來都是這樣喔
(28:30~29:33) 並不是AI出現才變這樣 那一直以來的這個趨勢我們可以看到就是 程式語言變得越來越高層越來越簡單 像是現在我們有Python對不對 Python就是已經非常接近自然語言的一個語言 那比起他呢 就是複雜的蠻多 就比較下面那一層 那更下面一層呢還有一些什麼Assembly之類的 然後同時我們也有看到很多 我們所謂No Code的工具的出現 這個No Code的這個趨勢呢 我們已經講了好幾年了嘛 那這個像是這個 你現在要架一個網站呢 你不用懂HTML,CSS,JavaScript 你只要使用像是Wix 或者是Wordpress 你就可以做出一個網站了 所以說軟體工程的抽象化其實一直都在進行 程式語言越來越簡單 No Code工具越來越多 要寫的code越來越少 這個一直都是這個時代的潮流這樣 那在生成世界出現之後呢 這個抽象化的進度是大幅的加速了 我們從這個Python這種語言呢 直接跳到了自然語言
(29:33~30:33) 直接用這個我們平時溝通的這個語言呢 英文中文 現在應該主要是英文啦,當然還有其他語言 就可以直接寫code了這樣 像是之前呢,就算你Python已經很簡單了 你要寫一個貪吃蛇的遊戲呢 你可能還是要去學一下 基本的語法 然後這個Pygame的這個模組之類的 但現在呢 你只要跟ChadGPD說 請幫我寫一個貪吃蛇的遊戲 就直接寫出來了 那生成式AI剛出來的這幾年呢 其實到現在也是剛出來那幾年 但是哇,這一兩年感覺時間過好快 但反正在去年跟前年呢 可能大家寫code的 使用的這些AI模型呢 像是GetUpCopilot 他們都是AutoComplete的那種寫code工具 幫你寫一個注釋 他幫你把這個function給寫出來 那像是Devon這種 我把它稱作Agent的寫code工具 又是下一個時代了 又會再把這個抽象化的進度 又大幅提升一次 當然啦,這個Devon他是第一代的工具
(30:33~31:33) 之後他還會不斷的疊代越來越強 包括他的大腦會變強 他們team根據大家使用的狀況 也會在不斷的疊代他們產品 這個Agent跟API的部分 但反正他一定會變得越來越有用 而且會進步的非常快 因為現在所有熱錢呢都在這邊 你看這間公司才創立兩個月 他們就募到了2100萬美元 這個熱錢都往這邊滾啊 那在這種情況之下呢 軟體工程師的質押前景 究竟會變得如何 這才是我們今天要討論的重要問題 那現在我們就來看看 這才是我們今天要討論的重要話題 那我先講結論啦 就是我覺得 軟體工程師的質押前景 絕對會變差 我指的質押前景可能就是這個 工作的待遇啊 薪資啊這樣子的這些東西 我認為是會變差的 那為什麼會這樣呢 要知道這個質押前景呢 在這個就業市場是由供需決定的 就跟所有其他物品的 這個價格一樣
(31:33~32:33) 供需決定的 Economic 101 那我們先從需求的角度來看 軟體工程師的需求 未來會怎麼樣變化 那這個工程師的需求呢 基本上是由兩個數字相乘得出來的 一個數字呢是 工作量 軟體工程的工作量有多少 另外一個數字呢是 每單位工作量所需要的 工程師數量 這兩個東西相乘你就會得到 現在究竟需要多少個工程師嘛 那每單位工作量 所需要的工程師數量呢 我認為會少非常非常多 這個數字會降低極多 這當然就是因為 每位工程師的生產力呢 是大幅提升的 你想像一下一個Devon他的 工作效率已經比一個可能Junior的 Sulfur Engineer是高非常多了 當然可能會需要 一點點人類的幫助 但是他讀整個Code Documentation 整個Library的Documentation 只要一兩秒
(32:33~33:33) 然後他寫出 一整個Code Base可能只要 十幾秒之類的 而且這個Devon基本上是永遠不下班 而且隨Call隨到 這麼強的一個AI寫程式助手呢 每一個工程師 他下面可以一次管 十幾個之類的 你下面可以直接有十幾個Devon 在幫你分別寫不同的東西 然後你 然後做的事情呢 就是用自然語言跟他們聊聊天 看一下他們的進度在哪裡 這樣而已 注意喔我這邊講的是工程師 因為我覺得短期呢 還是要有懂Tech的人來做這件事情 因為我們在Agent領域 常常講到一個概念就是 Human in the Loop 我們會需要有一個人類 在他們的輝圈當中 隨時去給出 一些指正這樣 短期來看還是重要的 但整體來說 每一個工程師他能做到的事情 絕對是多非常多
(33:33~34:33) 換言之呢就是 同樣一個單位的工作量 所需要的工程師數量會少非常多 那另外一個變數就是 那總工作量會變多還是變少 因為假設這個 每個單位的工作量 所需要的工程師變少很多 但是工作量的總量 變大非常多 那這樣搞不好這個工程師的需求呢 是不減少反增加的喔 那這邊呢 我自己是覺得不會那麼誇張啦 我自己是覺得這個軟體開發的 工作量可能確實真的是會變多 但是不可能 比那個這個 工程師他生產力的提升 的倍數還要大非常多 絕對不可能的這個工程師 的生產力的提升是大得 太誇張了所以整體來看 就是每單位工作量要的工程師 數量少非常多 然後工作量總體變大 一點點所以說 整體看來呢工程師的需求 是會下降的然後另外一邊我們來 看這個工程師的供給
(34:33~35:33) 那這邊呢我覺得很明顯 就是會增加的 那這個原因也很明顯就是 要成為一個軟體工程師的門檻 又下降了這個 門檻其實一直以來都是持續的 下降的這個也呼應我們 一開始講的就是這個軟體工程 工程的行業呢逐漸抽象化 的過程這個門檻是 一直下降的網路上的資源變得越來 越多然後越來越多人是參加 這種bookcamp出來 變成工程師而不是念這個 傳統的資工系這樣然後自學 成為工程師的人也變得越來越多 像是我自己也是自學的 雖然說我不是軟體工程師啊我上 一份工作呢寫的是 Machine Learning那個Data Science的code 但前端後端 我自己也是摸過一些然後 也開發過所以說我 都是有學過的那我覺得這個AI 出來之後啊這個門檻呢 真的又是大幅的下降了 就是不只是你 工作上需要用到的這個 Technical的技術變少 就是你開始越來越多是使用自然語言
(35:33~36:33) 在使用這些工具 不只是這點喔你學習的 進度也會大幅的增加 就是因為這些AI真的是 非常好的個人家教 像是我前一陣子其實 我自己有幫我自己的這個 做的這個GPT寫一個API 那在這之前呢 我是沒有用Note.js寫過API的 我從來沒有就是用 建一個這種Express App這種 這種東西但是我靠著 這個ChartGPT呢 我一個晚上就做完了就做出來了 而且還是可以 至少我在Localhost上面Test或是可以 就是當然部署之後呢 這個可能Skeema出了 一些問題好但那個都是後事 反正我可以很快的在一天之內 我就用我從來沒有用過的語言 寫出一個API 那這件事情呢在我之前 我之前寫code 不可能有這麼快的 我絕對是先花一個晚上 先看一下Note.js 跟這個Express App 的教學然後再去
(36:33~37:33) 一步一步的嘗試自己去 implement這件事情 現在的做法呢就是直接跟ChartGPT說 我要這個東西然後寫出來之後 再叫他一個步驟一個步驟的解釋 這樣就是反過來的一個步驟 所以一個沒背景的人 要變成工程師越來越簡單了 這就會增加工程師的供給 那所以說有學過經濟學的都知道 供給增加需求減少 這兩股力道是 再往同一個方向推的 是把這個你的Price 也就是這個軟體工程師的待遇 是往同一個方向推的就是往下推 所以結論就是這個 軟體工程師的質押前景會變差 Again 這是我自己個人的想法 剛剛這整個分析框架都是我自己建的 那我覺得絕對會有人不同意這個看法 我也歡迎這個理性的討論 那我覺得在這之後 延伸的一個話題就是 什麼樣子的工程師 比較容易被取代 然後什麼樣子的工程師比較不容易被取代 因為對於很多人來說 他們現在已經是軟體工程師了
(37:33~38:33) 然後他們知道自己質押前景變差 當然這個不好過 但是還有很重要的一點就是 你是會先被取代的那個人 還是比較晚被取代 或是就是被存活下來的那個人 我們不要講比較晚被取代 那我覺得這邊很明顯啦 最容易被取代的就是 那些非常junior 他只懂如何使用工具的人 他可能只懂這些程式語言的語法 然後一些基本的工具 怎麼使用這些Command Line IDE Git 就只知道這些非常基本的工具 那你只會用這些工具的人 你當然就是 容易被取代就是因為這個Devon 這些工具都會用啊 然後他寫code 也會比你快非常多 讀code也比你快非常多 那你要怎麼樣勝過他呢 然後一些基本的feature你會寫的Devon都會寫啦 然後你會需要去 這個Stack Overflow找答案的 Devon都已經全部背起來了 所以說這邊真的是贏不過
(38:33~39:33) 那比較不容易被取代的呢 就是這個行業中的精英 就是我們所謂 所謂的10x engineer 這些最優秀的軟體工程師 那他們有幾個特質喔 第一個就是他們能夠寫出 最優化的code 就是你在Stack Overflow你找不到這樣子的code 他寫出來的code 他執行的速度 他準確度各個方面呢 是一般 工程師寫出來的code好幾倍 就像是有一些在寫那個 可能高頻交易的code的人 他們的code執行的時候 可能0.1秒都有差之類的 可能0.01秒都有差我不知道 反正是非常intense 那這個想當然啦你去網路上拼拼湊湊 這些code拼出來你是沒有辦法 做到這種程度的 那這個就是Devon沒辦法取代的 就是因為Devon他就是 GPT-4嘛 那GPT-4就是一個 Next Token Prediction的機器 我覺得你是科技上的聽眾 你應該已經很熟悉這個概念了
(39:33~40:33) 那你如果是第一次聽的 他就是一個字接著一個字 在做文字接龍的遊戲 那他怎麼判斷下一個字要出哪一個字 他就是看他 就是看機率 在所有的字中哪一個字的 出現的機率最高他就放那個字 也就是說他寫出來的這些code 他的品質他的訓練字 還有綜合下來的結果而已 你可以說他是一個平均之類的概念 這樣子 平均當然比不過一個 最優化的code 除了這個優秀的寫code能力 這些TenX Engineer還有一些 其他特質是沒有辦法被Devon取代的 就是包括他們 有這些全局關 他們可以看到所有feature合在一起 會怎麼運作 甚至看到說這個使用者 在使用的時候他們會有 什麼樣子的感受 然後也可以看到這些feature 他們比較長期的impact 這些東西都是Devon比較 難去看到的 除了這些以外
(40:33~41:33) 還有一些軟實力 像是這個溝通力 與人協作的能力 這些能力都是在職場上 非常有價值的 也沒辦法被AI取代的 就祝所有的 軟體工程師或是想成為 軟體工程師的人都可以成為 TenX Engineer 那Devon這邊最後一個 可能收尾的話題呢 Devon的競爭者是誰 Devon的下一步是什麼 這邊呢我覺得就很快聊一聊 我覺得Devon會持續 進步這個是無庸置疑 就是這個團隊他們在 他們的 Agent API的部分都會 持續做優化 OpenAI也會繼續去train他們 不管是GPT 4.5還是 GPT 5他們會繼續train 除此之外啊我覺得大家 可以期待的東西有兩個 第一個就是開源的Devon 我覺得很快就有一個開源的Devon 的競爭者出現了 因為我們已經看到很多開源的專案是
(41:33~42:33) 很類似Devon的這些軟體了 就像是這個 GPT Engineer或是Meta GPT 這樣子的概念都很接近Devon了 所以說我覺得很快就有一個 開源版的Devon在幣原 模型這邊呢我自己非常期待 的一個潛力股一個黑馬 黑馬就是這個Google的 Alpha Code 2 那這個Alpha Code 2呢是以Gemini 作為他的base model train出來的一個 Agent的模型 他也是一個Agent喔就是他有 在這個Gemini的大腦以外呢 外裝給他一個 search的能力 那這個部分呢我們是還沒有看到 很多的這些demo或者是 實際使用的體驗 還是我沒有看到有可能是我沒 看到喔對那反正 這個Alpha Code 2呢我覺得 就是一個很類似 Devon的一個軟體然後 也會非常強好那我們這個Devon的話題 呢就講到這邊吧 好像是又講的有點太久了 那今天應該是 沒有時間把這個
(42:33~43:33) 剩下的兩個話題都講得很完整 不過呢我覺得還是要讓大家知道 一下就是這兩件事情他們 究竟發生了什麼事然後 重要在哪裡重要在哪裡 然後我有什麼想法這樣 那首先呢上禮拜是這個 馬斯克的太空公司SpaceX 的一個大日子 那我們知道SpaceX有一個史上 最強的火箭喔 不只是SpaceX史上是人類 史上造過最強 的火箭喔最強就指他的 推力是最強的喔然後 他也是這個最大然後 再重量最重的這個火箭 叫做Starship 中文叫做星艦 那這個星艦呢他的最終 目標就是帶人類殖民火星 這也是為什麼他 這麼強大因為他要可以再重 100公噸以上 這樣子才能帶足夠的物資到 火星那這個星艦現在仍然在 這個開發的階段 他有試射過兩次了分別 是IFT1跟IFT2 IFT就是
(43:33~44:33) Integrated Flight Test就是他們說 是非的這個名詞 上禮拜這個星艦就進行了 他的第三次試飛他的 IFT3這是有史以來第三次的試飛 然後你如果想要快速的了解 這個IFT1跟2他的結果 然後還有這個星艦的一些 他的可能他的細節 的部分你可以去聽 科技浪的EP17 EP17的後半部呢 有聊這個星艦那我這次也是 有跟到這個IFT的直播 這個星艦每次發射呢 SpaceX都會在X平台 上面直播這樣 那我是有看我是有跟到這樣 那只能說哇 真的是熱血沸騰啊 這次的IFT3真的是一個非常 成功的一次試射 那我就跟大家大概 講一下這整個過程啊 然後在過程中呢順便帶到一些 就是他在IFT3 達成的一些里程碑 那一開始Countdown到0的時候呢 這個火箭是非常 順利的升空
(44:33~45:33) 所有的33個Raptor Engines全部都有點燃 全部都有正常運作這樣 然後到了他第一個關鍵點呢 就是他們要進行分離的時候 這個Hot Staging的部分 那這個分離就是 指這個星艦呢 他是有兩個部分組成的 分別是他下面的一個 叫做Super Heavy Booster 的一個也就是這個推進器 那他是比較大的這個部分 那比較上面比較小的那個部分呢 我們把它稱作 Starship就是星艦 整體叫星艦 但他上面那個小東西也叫做星艦 那因為那個星艦呢 上面那個小的星艦呢 他才是你放貨物的地方 然後人類乘坐的地方 也是這個真正要上外太空 真正要到火星的地方 Super Heavy Booster不會到火星 也不會到外太空他的工作呢 就是把這個星艦給推到一定的高度 讓他可以就是 順利的到外太空這樣 那這個分離的階段呢也就是這個
(45:33~46:33) 就是這個推進器 這個Super Heavy Booster要跟 Starship分開的時候 那這邊的分離呢其實 IFT2就已經成功了 那這次IFT3呢也是再成功了一次 那分離之後 這個Super Heavy Booster跟 Starship就有各自的任務各自的命運 那這個Super Heavy Booster 他的任務呢就是 往回飛飛到一個指定的地點 然後降落 最後是要讓這個他們 他們所謂的Chopsticks 就是這個他們的一個很高的 一個塔 有兩隻鐵桿子伸出來的塔 把這個Super Heavy Booster給接住 那這是最後啦 那這次測試他當然沒有測試這個 他只是想要測試兩個關鍵的操作 一個叫做Boost Back Burn 一個叫做Landing Burn 那Boost Back Burn就是這個Super Heavy Booster 他往回飛然後飛到指定地點的時候 他點燃 引擎去做出的這個 動作 Landing Burn
(46:33~47:33) 就是指他在 要降落的時候 他又再次點燃他的引擎 讓他可以減緩他的降落速度 那這個 IFT3呢我們成功的 看到了Boost Back Burn 但是我們沒有看到這個Landing Burn Landing Burn的部分是 沒有成功的這個有些引擎沒有點燃 然後這個Super Heavy Booster 就在降落的時候就自毀了 那再來我們回過來看Starship Starship的命運如何 這真的是非常厲害 他有成功的進入 地球的Orbit 就是這個地球的軌道 然後在地球的軌道飛行了一陣子 飛行了幾十分鐘 你要知道這個是人類史上 最大的飛行物在外太空 我們在外太空 放過最大的飛行物就是這個 所以這真的也可以說是 歷史的一刻 在地球的軌道呢他其實有要測試 兩個東西 一個是他們所謂的 Pestor Open
(47:33~48:33) 也就是這個Palo Door 貨物艙的門要能夠在外太空打開 因為如此一來呢 你就可以部署 Starlink的衛星 那這次Starship 有成功的打開這個門 然後成功的關上 所以說他以後會有部署 Starlink衛星的能力 這件事情是比較困難的一個 就是叫做Propellant Transfer 基本上就是在外太空補燃料 這件事情他要跟這個 外太空原本SpaceX就發射上去 的這個燃料箱做Docking 做結合的一個動作 然後把這個燃料給補到 Starship上面 這是很重要的一件事情因為你如果要飛一長途一點 就比如說你飛到月球 或是飛到火星你一定要在 這個外太空能夠補燃料 那這個這次的IFT3 他們也成功的完成了這次的測試 那成功完成了這兩項測試之後 Starship就是要 回到地球然後要被 回收嘛最好的情況 當然是可以被回收啦
(48:33~49:33) 但是他就是在進入 大氣層的時候呢 他有一點被燒掉了這樣 那進入大氣層那幾刻 就是他被燒掉之前啊 那個時候直播都還有訊號喔 就是真的這個Starlink的網路真的很強喔 那個時候直播都有訊號 那你會看到他的這個太空梭的表側呢 有這個高溫的電漿聚集 那個畫面真的是超酷 真的我覺得 那個有1600多度C的這種高溫電漿 超酷的 所以總體來看啊 這真的是非常成功的一個結果 我們基本上驗證了 Starship這個概念是可以用的 這個火箭是可以到外太空的 而且可以在外太空補燃料 可以在外太空部署衛星 那會需要繼續努力的 部分呢就是這些 不管是Booster還是Starship也好 他們的回收的部分 回收的部分是比較困難的 那馬斯克也說了 他說今年還會再有六次的 Starship測試 所以說我覺得依照Starship現在進步的速度
(49:33~50:33) 就是他真的從IFT1到2到3 每一次都是大躍進啊 我真的覺得 可能在明年呢 我們上火星是絕對沒問題 我們上月球吧 怎麼上月球 講錯了不可能明年上火星 我們明年上月球是非常有可能的 那這個SpaceX的事件 就大概講到這裡 最後就是這個Figure AI的機器人 那這邊其實 老實說真的沒有太多可以講的東西 反正呢 就是有一間叫做Figure AI的 AI機器人新創 他們去發出了一個Demo影片 是Demo說 他們的機器人有跟OpenAI 做結合 所以說可以跟人類對話 人類就叫他說你桌上拿一個東西給我吃 然後他就把蘋果拿起來遞給人類 這樣 然後人類再說幫我把這些垃圾放到籃子裡 就這樣做 反正就是這樣子的一個影片啦 然後大家可以自己去看一看 反正這個影片我自己覺得是蠻酷的
(50:33~51:33) 然後也有Go viral 這也是為什麼我們現在在講這件事情 因為這個影片Go viral了 我覺得很多人覺得這影片厲害的一點 就是人類可以跟這個機器人用自然語言對話這一點 這點其實根本就沒有什麼好驚訝的 就一樣你就是 拿個ChatGPT的 腦袋他的API 然後讓他學會call你的這些 Action Neural Network Model 他們有很多這種Neural Network的 Action Model是專門在做 特定的動作的 比如說拿蘋果這件事情就有一個 Neural Network在負責這件事情 那這個ChatGPT呢 根據他這個跟使用者對話呢 選擇去call一些相對應的 這些Model 這件事情其實真的沒什麼特別的 Tesla的Optimus要做到這件事情 也非常簡單 他就直接給他這個 一個LM的大腦就可以了 那實際要比較Tesla的Optimus 跟Figure One 就是這個Figure AI的機器人 我覺得是有一點
(51:33~52:33) 難比啦因為他們兩邊呢 目前都釋出非常非常少的資訊 就是他們一些demo影片 然後demo影片可能有給一些 線索大概就是這樣 所以我覺得沒有辦法很好的比較這兩者 但我目前的想法是 Tesla他的手的精細程度 應該是比Figure One還好一點 那這個Figure One他的 Neural Network 就是Action Neural Network Model 他的效率應該是 比Tesla高一點點這是我的猜測 因為我覺得他們是 動的比較快一點在他們 非常少的訊息當中 他們有講到就是Figure One 他的手部動作 他可以做到200Hz 也就是說一秒他可以 校正200次我個人是覺得 Optimus應該還沒有那麼快 但是你如果說長期要 選一個贏家我覺得應該是 Optimus因為Optimus他們 有Tesla Dojo 就是他們非常強的這個 很擅長處理影像 的訓練設施然後再來
(52:33~53:17) 重要的一點就是Tesla有 非常強的製造能力 尤其是低成本的製造 那我猜這個Figure One 絕對這個製造能力是不可能 比得上Tesla的好那就 短暫的聊到這邊好那 如果你喜歡今天的節目呢 一樣就是老壞我覺得我已經講好多遍了 我不知道大家有沒有反了 反正你喜歡的話就幫我五星評分 然後留言然後 這個也謝謝今天的贊助商 ASUS想要買這個全能筆電 可以去參考這個Zephyrus G16這一台 然後呢如果你也想要贊助 科技狼的話可以到本集資訊欄 裡面找到我們 科技狼的這個聽眾輪廓然後還有 這個我的信箱我們 的Team的信箱你寄信過來 我們就會有人回你了那最後一樣
